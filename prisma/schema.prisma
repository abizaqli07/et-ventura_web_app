generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// =========== User Auth Model =========== //
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    role         ROLES
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          ROLES        @default(ENTREPRENEUR)
    profile       UserProfile?
    accounts      Account[]
    sessions      Session[]
    project       Project[]
    likes         Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserProfile {
    id        String  @id @default(cuid())
    username  String?
    name      String?
    phone     String?
    address   String?
    city      String?
    country   String?
    postCode  Int?
    biography String?
    interest  String?
    skills    String?
    user      User    @relation(fields: [userId], references: [id])
    userId    String  @unique
}

// =========== Feed Model =========== //
model Project {
    id          String        @id @default(cuid())
    userId      String
    title       String
    description String
    image       String?
    status      PROJECTSTATUS
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    user User   @relation(fields: [userId], references: [id])
    likes Like[]

    @@unique([createdAt, id])
}

model Like {
    userId    String
    projectId String

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@id([userId, projectId])
}

// =========== Enums Model =========== //
enum ROLES {
    ADMIN
    ENTREPRENEUR
    INVESTOR
}

enum PROJECTSTATUS {
    PRIVATE
    PUBLIC
    CROWDFUND
    INVEST
}
